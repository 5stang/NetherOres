<project name="NetherOres" default="install" basedir=".">
	<property environment="env"/>
	
	<!-- Basic directories -->
	<property name="download.dir" value="downloads"/>
	<property name="build.dir" value="build"/>
	<property name="src.dir" value="src"/>
	<property name="resources.dir" value="resources"/>
	<!-- Version file (main class) -->
	<property name="verclass.dir" value="${src.dir}/powercrystals/netherores" />
	<property name="verclass.name" value="NetherOresCore.java"/>
	
	<!-- Forge version -->
	<property name="minecraft.version" value="1.7.2"/>
	<property name="forge.major" value="10"/>
	<property name="forge.minor" value="12"/>
	<property name="forge.bugfix" value="0"/>
	<property name="forge.build" value="1055"/>
	<property name="cofh.commit" value="24600c4cfda893a16316c0631972170413f3a1e3"/>
	
	<!-- Packaging -->
	<property name="dist.dir" value="${build.dir}/dist"/>
	<property name="classes.dir" value="${build.dir}/packaging"/>
	<property name="apiclasses.dir" value="${build.dir}/api-packaging"/>
	
	<!-- Forge paths -->
	<property name="forge.dir" value="${build.dir}/forge"/>
	<property name="forgebuild.dir" value="${forge.dir}/build"/>
	<property name="compile.dir" value="${forgebuild.dir}/tmp/compile"/>
	<property name="reobf.dir" value="${forgebuild.dir}/classes/main"/>
	<property name="lib.dir" value="${forgebuild.dir}/libs"/>
	<property name="sources.dir" value="${forgebuild.dir}/sources/minecraft"/>
	<property name="forge.version"
		value="${minecraft.version}-${forge.major}.${forge.minor}.${forge.bugfix}.${forge.build}"/>
	<property name="forge.url" value="http://files.minecraftforge.net/maven/net/minecraftforge/forge/${forge.version}/forge-${forge.version}-src.zip"/>

	<!-- Classpaths -->
	<path id="mcp.classpath">
		<pathelement location="${compile.dir}"/>
		<fileset dir="${forge.dir}/.gradle/caches">
			<include name="modules*/files*/**/*.jar"/>
			<exclude name="modules*/files*/commons-io/commons-io/1.4/**/*.jar"/>
		</fileset>
	</path>
	<path id="gson">
		<fileset dir="${forge.dir}/.gradle/caches">
			<include name="modules*/files*/com.google.code.gson/**/*.jar"/>
		</fileset>
	</path>
	
	<!-- Task skipping -->
	<available property="already-compiled" file="${lib.dir}/modid-1.0.jar"/>
	<available property="forge-exists" file="${download.dir}/forge-${forge.version}-src.zip"/>
	<condition property="forge.already.installed">
		<available file="${forge.dir}/build/dirtyArtifacts/forgeSrc-${forge.version}.jar" type="file"/>
	</condition>
	<condition property="have-apis">
		<and>
			<available file="${sources.dir}/powercrystals/core" type="dir"/>
			<available file="${sources.dir}/buildcraft" type="dir"/>
			<available file="${sources.dir}/ic2" type="dir"/>
			<available file="${sources.dir}/appeng" type="dir"/>
			<!--<available file="${sources.dir}/thermalexpansion" type="dir"/>-->
		</and>
	</condition>
	
	<mkdir dir="${download.dir}"/>
	<mkdir dir="${build.dir}"/>

	<target name="get-dependencies" depends="get-version" unless="${have-apis}">
		<echo message="Downloading IC2... " />
		<get src="http://ic2api.player.to:8080/job/IC2_experimental/253/artifact/packages/industrialcraft-2-api_2.0.253-experimental.zip" dest="${download.dir}/industrialcraft-2-api.zip" />
		
		<echo message="Downloading BuildCraft API..." />
		<get src="https://github.com/BuildCraft/BuildCraft/archive/3e13bbb166568624cc918f8a9f916fa2062f6c37.zip" dest="${download.dir}/BuildCraft-master.zip"/>
		
		<echo message="Downloading AppEng API..." />
		<get src="http://ae-mod.info/releases/appeng-rv13-c-mc162.jar" dest="${download.dir}/appeng.zip"/>
	</target>

	<target name="extract-dependencies" depends="setup-forge,get-dependencies" unless="${have-apis}">
		<delete dir="${lib.dir}/"/>
		<mkdir dir="${lib.dir}/"/>
		<copy todir="${sources.dir}/powercrystals/core">
			<fileset dir="${download.dir}/PowerCrystalsCore-master/src/powercrystals/core" />
		</copy>
		
		<echo message="Extracting BuildCraft API..." />
		<unzip src="${download.dir}/BuildCraft-master.zip" dest="${download.dir}"/>
		<mkdir dir="${sources.dir}/buildcraft/" />
		<move file="${download.dir}/BuildCraft-3e13bbb166568624cc918f8a9f916fa2062f6c37/common/buildcraft/api" todir="${sources.dir}/buildcraft/"/>
		
		<echo message="Extracting IC2 API... " />
		<unzip src="${download.dir}/industrialcraft-2-api.zip" dest="${download.dir}" />
		<move file="${download.dir}/ic2" todir="${sources.dir}" />
		
		<echo message="Extracting AppEng API... " />
		<unzip src="${download.dir}/appeng.zip" dest="${download.dir}" />
		<delete file="${download.dir}/appeng" />
		<unzip src="${download.dir}/appeng_api.zip" dest="${download.dir}" />
		<move file="${download.dir}/appeng" todir="${sources.dir}" />
	</target>
	
	<target name="install" depends="build">
		<move file="${lib.dir}/modid-1.0.jar"
			tofile="${dist.dir}/NetherOres-${build.full}${build.number}.jar"/>
		
		<!-- Cleanup -->
		<delete dir="${apiclasses.dir}"/>
		<delete dir="${sources.dir}/powercrystals/netherores"/>
		<delete dir="${classes.dir}"/>
		<delete dir="${reobf.dir}"/>
	</target>

	<macrodef name="install-lite">
		<attribute name="build"/>
		<attribute name="classes" default="${compile.dir}"/>
		<sequential>
			<copy todir="${classes.dir}">
				<fileset dir="@{classes}">
					<include name="powercrystals/netherores/**/*.class"/>
				</fileset>
			</copy>
			<copy-assets/>
			<jar destfile="${dist.dir}/NetherOres-${build.full}@{build}.jar"
				compress="true" level="9" basedir="${classes.dir}"/>
		</sequential>
	</macrodef>
	
	<macrodef name="copy-assets">
		<sequential>
			<copy todir="${classes.dir}" file="mcmod.info" overwrite="true"/>
			
			<copy todir="${classes.dir}/assets/netherores/textures">
				<fileset dir="${sources.dir}/powercrystals/netherores/textures"/>
			</copy>
			
			<copy todir="${classes.dir}/powercrystals/netherores/lang">
				<fileset dir="${sources.dir}/powercrystals/netherores/lang"/>
			</copy>
		</sequential>
	</macrodef>

	<target name="build" depends="extract-dependencies,get-build-number,copy-sources" unless="already-compiled">
		<!-- Recompile -->
		<mkdir dir="${compile.dir}"/>
		
		<depend srcdir="${sources.dir}" destdir="${compile.dir}">
			<include name="powercrystals/netherores/**/*.java"/>
		</depend>
		<javac srcdir="${sources.dir}" destdir="${compile.dir}" target="1.6" source="1.6"
			classpathref="mcp.classpath" debug="true" debuglevel="lines,source" includeAntRuntime="false">
			<include name="powercrystals/netherores/**/*.java"/>
		</javac>
		
		<!-- Dev jar -->
		<install-lite build="dev-${build.number}"/>

		<!-- Reobf -->
		<copy todir="${reobf.dir}">
			<fileset dir="${classes.dir}"/>
		</copy>
		<exec executable="./gradlew" failonerror="true" dir="${forge.dir}/" vmlauncher="false">
			<arg line="-g .gradle"/>
			<arg line="reobf"/>
			<arg line="-x compileJava"/>
		</exec>
	</target>

	<target name="copy-sources" unless="already-compiled">
		<!-- Copy source -->
		<mkdir dir="${sources.dir}/powercrystals"/>
		<copy todir="${sources.dir}/powercrystals" overwrite="true" preservelastmodified="true">
			<fileset dir="${src.dir}/powercrystals"/>
		</copy>
	</target>

	<target name="setup-forge" depends="download-forge" unless="forge.already.installed">
		<delete dir="${build.dir}" failonerror="false"/>
		<mkdir dir="${build.dir}"/>
		<unzip dest="${forge.dir}">
			<fileset dir="${download.dir}">
				<include name="forge-${forge.version}-src.zip"/>
			</fileset>
		</unzip>
		
		<!-- Cleanup, and adding in old file structure for convenience -->
		<delete>
			<fileset dir="${forge.dir}">
				<include name="*.txt"/>
				<include name="src/**/*.info"/>
			</fileset>
		</delete>
		<delete dir="${forge.dir}/eclipse" failonerror="false"/>
		<delete dir="${forge.dir}/src/main/java" failonerror="false"/>
		
		<!-- Change executables' permissions -->
		<chmod file="${forge.dir}/gradlew" perm="+x"/>

		<copy file="${download.dir}/PowerCrystalsCore-master/pcc_at.cfg" todir="${forge.dir}/src/main/resources/"/>

		<!-- Install forge -->
		<exec executable="./gradlew" failonerror="true" dir="${forge.dir}/" vmlauncher="false">
			<arg line="-g .gradle"/>
			<arg line="extractForgeSrc"/>
			<arg line="eclipseClasspath"/>
		</exec>

		<mkdir dir="${compile.dir}"/>
		<javac srcdir="${forge.dir}/build/tmp/recompSrc" destdir="${compile.dir}" target="1.6" source="1.6"
			classpathref="mcp.classpath" debug="true" debuglevel="lines,source" includeAntRuntime="false"/>
		<jar destfile="${forge.dir}/build/dirtyArtifacts/forgeSrc-${forge.version}.jar" compress="true"
			level="9" basedir="${compile.dir}"/>
		<delete dir="${compile.dir}"/>
		
		<!-- Move decompiled files -->
		<copy todir="${sources.dir}" overwrite="true">
			<fileset dir="${forge.dir}/build/tmp/recompSrc"/>
		</copy>
	</target>

	<target name="download-core" unless="forge-exists">
		<echo message="Downloading PowerCrystalsCore... "/>
		<get src="https://github.com/skyboy/PowerCrystalsCore/archive/master.zip" dest="${download.dir}/PowerCrystalsCore-master.zip"/>
		
		<echo message="Extracting PowerCrystalsCore... "/>
		<unzip src="${download.dir}/PowerCrystalsCore-master.zip" dest="${download.dir}"/>
	</target>

	<target name="download-forge" depends="download-core" unless="forge-exists">
		<echo message="Downloading forge... "/>
		<get src="${forge.url}" dest="${download.dir}/forge-${forge.version}-src.zip"/>
	</target>

	<target name="get-version" depends="setup-forge" unless="${build.full}">
		<!-- Read version out of file -->
		<script language="javascript"><![CDATA[
			importClass(java.io.File);
			importClass(java.util.Scanner);
			
			var mainClass = new File(project.getProperty("verclass.dir"), project.getProperty("verclass.name"));
			mainClass = new Scanner(mainClass, "UTF-8").useDelimiter("\\Z");
			var text = mainClass.next();
			mainClass.close();
			
			var matches = /[0-9.]+R[0-9.]+((RC|B)[0-9]+)?/.exec(text);
			
			project.setProperty("grep.out", matches[0]);
		]]></script>
		
		<!-- Split mod&mc version, update mcmod -->
		<script language="javascript" classpathref="gson"><![CDATA[
			importPackage(Packages.com.google.gson);
			importPackage(Packages.com.google.gson.stream);
			importPackage(java.io);
			importClass(java.util.Scanner);
			
			versionlist = project.getProperty("grep.out").split('R');

			mcversion = versionlist[0];
			mfrversion = versionlist[1];
			if (versionlist.length > 2)
				mfrversion = versionlist[1]+"R"+versionlist[2];
			
			project.setProperty("mfrv", mfrversion);
			project.setProperty("mcv", mcversion);
			
			// open file and parse JSON structure
			var file = new File("mcmod.info");
			var mcmod = new Scanner(file, "UTF-8").useDelimiter("\\Z");
			var data = new JsonParser().parse(mcmod.next()).getAsJsonArray();
			mcmod.close();
			
			// update all version elements
			for (var i = 0, e = data.size(); i < e; ++i) {
				var element = data.get(i).getAsJsonObject();
				element.addProperty("version", mfrversion);
				element.addProperty("mcversion", mcversion);
			}
			
			// write file back, pretty-printed
			var output = new JsonWriter(new FileWriter(file));
			output.setIndent("    ");
			new Gson().toJson(data, output);
			output.close();
		]]></script>
		<echo message="Version: ${mfrv}"/>
		<property name="build.full" value="[${mcv}]${mfrv}-"/>
	</target>

	<target name="get-build-number" depends="build-number-there" unless="${build.number}">
		<echo message="!! No build number set !!"/>
		<property name="build.number" value="CUSTOM_BUILD"/>
	</target>

	<target name="build-number-there" depends="get-version" if="env.BUILD_NUMBER" unless="build.number">
		<echo message="Using build number ${env.BUILD_NUMBER}..."/>
		<property name="build.number" value="${env.BUILD_NUMBER}"/>
	</target>

	<target name="clean" >
		<delete dir="${build.dir}"/>
	</target>

	<target name="jar" depends="install"/>
</project>